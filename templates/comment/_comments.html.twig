{#

To use this template, we need access to those variables :

    - the commented entity type (ex: a projectPresentation, an article, etc)
    - how many comments the entity have

#}


{% macro oneCommentContainer(commentedEntityType, comment, parentCommentId, showRepliedUserName) %}
    
    <div class="oneCommentContainer {% if app.user == comment.user %}activeUserAuthor{% endif %}">

        <!-- Comment Header -->
        <div class="errors"></div>
                            
        <!-- Comment Header -->

        <header>
        
            <!-- Comment's Author -->

            <a href="{{ path('show_user_profile', {'userNameSlug' : comment.user.userNameSlug}) }}">

                <span class="commentUserName {{ comment.isCreatedByEntityTeam(commentedEntityType) ? 'badge bg-primary text-white' }}">
                                
                    {{comment.user.persorg.name}}
                                
                </span>

            </a> 
                                
            <!-- Comment's Date -->

            <span class="commentDate">

                Il y a 
            
                <time>
                    {{ comment.createdAt | formattedElapsedTime}}                
                </time>

                {% if comment.updatedAt is not null %}
                    (puis modifié)
                {% endif %}

            </span>

        </header>

        <!-- Comment Content -->

        <p class="commentContent">

            {% if comment.repliedUser is not null %}<span class="repliedUserBadge">@{{comment.repliedUser.userNameSlug}}</span>{% endif %}

            {{ comment.content | nl2br  }}

        </p>

        <!-- Comment footer -->
        <div class="commentFooter">

            <!-- Reply to Comment Button -->

                <span class="replyCommentButton position-relative" data-comment-id="{{comment.id}}" data-parent-comment-id="{{parentCommentId}}">Répondre{% if not is_granted('ROLE_USER') %}<a class="coverable-link" href="{{path('app_login')}}"></a>{% endif %}</span >

            <!-- End of Reply to Comment Button -->

            <!-- Edit Comment Access -->

            {% if is_granted('update', comment) %}

                <a class="me-2" href="{{ path('update_comment', {'id': comment.id} ) }}">Modifier</a>

            {% endif %}

            <!-- Delete Comment (ajax request) -->

            {% if is_granted('delete', comment) %}

                <sapn class="js-remove-comment text-danger cursor-pointer" data-comment-id="{{comment.id}}" href="#">Supprimer</span>

            {% endif %}

        <!-- End of Comment Footer -->
        </div>     

    <!-- End of comment container -->               
    </div>

    

{% endmacro %}

{# new comment pattern #}
<script>

    const newCommentPattern = ({ newCommentContent, newCommentUrl }) => `

        <div class="liveNewComment">

            <div>Commentaire ajouté ✅</div>

            <div>

                ${newCommentContent}
            
            </div>

            <div>

                <a href="${newCommentUrl}" class="">Modifier</a>
            
            </div>

        </div>
    `;

</script>

<h3 class="commentSectionTitle">{{countComments}} Commentaire{% if countComments > 1 %}s{% endif %} </h3>

<form id="" class="commentForm position-relative" method="post">

    <textarea id="" class="commentContentTextarea" name="commentContent" placeholder="Ajouter un commentaire..." rows="4" cols="50"></textarea>

    {# Antispam protection based on time #}
    <span class="formTimeLoaded" style="display:none;">{{ 'now' | date('U') }}</span>

    {# Antispam protection based on honey pot #}
    <input type="text" class="hnyPt" name="hnyPt" autocomplete="off" style="width: 1px; height: 1px; border: none; display: contents;"/>

    <!-- Submit Form -->

    <div class="d-flex justify-content-end">

        <button type="submit" class="btn btn-light btn-sm d-flex align-items-center">
        
            Ajouter

            <svg class="ms-1" style="" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-send" viewBox="0 0 16 16">
                <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z"/>
            </svg>
            
        </button>
    
    </div>

    {# if visitor is not connected, we cover the form with a coverable link #}

    {% if not is_granted('ROLE_USER') %} 

        <a class="coverable-link" href="{{path('app_login')}}"></a>
        
    {% endif %}

</form>

<script>
    
    $(document).ready(function(){

        // creating a reply comment form (in addition to the create new comment form)
        var replyForm = $(".commentForm").clone().addClass("replyCommentForm");
        $(".commentForm").after(replyForm);
        replyForm.hide();

        // when user click on reply to a comment, we're placing the reply comment form where appropriate
        $(".replyCommentButton ").on( "click", function( event ){

            $(this).parent().after( $(".replyCommentForm")); // insert reply comment form after the message to answer

            $(".replyCommentForm").show();
            
            $(".replyCommentForm textarea").val('').focus(); 

            $(".replyCommentForm").attr("data-parent-comment-id", $(this).attr("data-parent-comment-id")) // store parent comment id for data base storage.

            $(".replyCommentForm").attr("data-comment-id", $(this).attr("data-comment-id")) // store replied comment id to notify replied comment user.

        });

        // Change send button color when input changed

        $('.commentForm textarea').bind('input propertychange', function() {

            var buttonColor;

            if(this.value.length){

                buttonColor = "#ddf5c4";
               
            }

            else{ buttonColor = "#ecf0f1";}

            //$('.commentForm button').css('background-color', buttonColor);
            $("button", $(this).parent()).css('background-color', buttonColor);

        });

        
        

        // submitting a comment   
    
        $(".commentForm ").on( "submit", function( event ){

            event.preventDefault();

            var commentContent = $('textarea', this).val();
            var parentCommentId = $(this).attr("data-parent-comment-id"); // or null
            var repliedCommentId = $(this).attr("data-comment-id"); // or null

            var formTimeLoaded = $('.formTimeLoaded', this).text();
            var hnyPt = $('.hnyPt', this).val();

            var commentedEntityId = {{ commentedEntityId }};


            $("button[type='submit']", $(this)).append('<div class="loader ms-2"></div>');

            var $t = $(this);

            $.ajax({  

              url: "{{path('ajax_create_comment')}}",
              type: 'POST',   
              dataType: 'json',
              data: {
            
                    "commentedEntityType": "{{ commentedEntityType }}",
                    "commentedEntityId": commentedEntityId,        
                    
                    "commentContent": commentContent,
                    "parentCommentId": parentCommentId,
                    "repliedCommentId": repliedCommentId,


                    "formTimeLoaded": formTimeLoaded,
                    "hnyPt": hnyPt,
              },
  
              async: true,  
              
              success: function(data, status) {
                
                $( ".errors", $t.closest(".oneCommentContainer")).text("");
                $( ".replyCommentButton", $t.closest(".oneCommentContainer")).remove();

                $(".loader").remove();
                console.log(data);

                $t.hide(); // hidding comment form

                $t.after([
                    { newCommentContent: commentContent, newCommentUrl: data.newCommentEditionUrl },
                ].map(newCommentPattern)); // we hydrate javascript new comment pattern

              },  
  
                error : function(xhr, textStatus, errorThrown) {

                    $(".loader").remove();

                    console.log(errorThrown);
                    
                    $( ".errors", $t.closest(".oneCommentContainer")).addClass("text-danger").text(xhr.responseJSON.error);

                    
                    //console.log(xhr.responseJSON);
                }  
  
            });
    

        });

        // Remove a Comment

        $('.js-remove-comment').on('click', function (){

            var commentId = $(this).attr("data-comment-id");

            if (confirm("Confirmez-vous retirer ce commentaire ainsi que ses réponses possibles ?"))
            { 

                $(this).html('<div class="loader"></div>');

                var $t = $(this);
                
                $.ajax({  

                    url: "{{path('ajax_remove_comment') }}",
                    type:       'POST',   
                    dataType:   'json',
                    data: {
                        "commentId": commentId,
                    },

                    async: true,  

                    success: function(data, status) {

                        //case comment might have child : we delete parent and potential childs

                        if($t.closest('.oneCommentContainer').parent(".threadContainer").length) {

                            $t.closest(".threadContainer").remove();

	                    } else { // we delete only one comment
	                    $t.closest('.oneCommentContainer').remove();
	                    }                       
                    
                    },  

                    error : function(xhr, textStatus, errorThrown) {  
                        // alert('Ajax request failed.');  
                    }  
                }); 
                    
            }


        });

    });



</script>


{# Comments display loop #}

{% for comment in commentedEntityComments | reverse %}

    {% if comment.getParent is null %} {# we display only parent comments (and then its potential child) #}

        <!-- thread container -->

        <article class="threadContainer mb-3 comment-{{ cycle(['odd', 'even'], loop.index0) }}">

            {{ _self.oneCommentContainer(commentedEntityType, comment, comment.id) }}

            <!-- Maybe Some Comment Childs -->

            {% if comment.replies | length > 0 %}

                <!-- Child Comments container with Indentation -->

                <div class="commentRepliesContainer">

                    {% for subComment in comment.replies %}

                        {{ _self.oneCommentContainer(commentedEntityType, subComment, comment.id) }}

                    {% endfor %}
                
                </div>
                <!-- End Of Comment Child Comments container -->

            {% endif %}

            <!-- End of Comment Section -->

        </article>

    {% endif %}

{% endfor %}


<style>

    .commentSectionTitle {

        margin-top: 1rem;
        margin-bottom: 1rem;
        font-size: 21px;
        color: #21212b;
        font-weight: bold;

    }

                
    .commentForm textarea {
      color: black !important;
      font-size: 1.05em !important;
      line-height: 1.15em !important;
      width: 100%;
      height: 60px !important;
      padding: 12px 12px !important;
      border: 1px solid #e5e3e3 ;
      border-radius: 3px;
      resize: none;
    }

    .commentForm textarea::placeholder {
        font-size:1em !important;
        font-weight:bold;
        color: #7b8a8b  !important;
    }


    .commentForm button[type="submit"] {
        
        padding: 5px 13px;
        margin-top: 5px;
        border-radius: 50px;
    }

    .oneCommentContainer{
        max-width: 540px;
        padding: 8px 10px 5px 10px;
        margin-bottom: 15px;
        background-color: #fbfdff;
        border: 1px solid #ced2ef;
        border-radius: 4px;
    }

    .oneCommentContainer header{
        margin-bottom: 5px;
    }

    
    .oneCommentContainer.activeUserAuthor {
        background-color: #ffe4c4ba;
    }

    .oneCommentContainer .commentUserName{
        color: #526074;
        font-size: 14px;
        font-weight: bold;
    }

    .oneCommentContainer .commentDate{
        padding-left: 3px;
        font-size: 12px;
        color: #312f4c;
    }

    .commentContent{

        font-size: 1.05em;
        margin-bottom: 5px;
        
    }



    .replyCommentButton{
        padding: 5px;
        font-size: 0.95em;
        cursor: pointer;
        margin-right: 7px;
        
    }

    .replyCommentButton:hover{
        background-color: #ddf5c4;
        border-radius: 6px;
        

        
    }


    .commentFooter{
        margin-bottom: 5px;
    }

    .repliedUserBadge {
	    font-size: 15px;
	    color: green;
    }

    .liveNewComment {
        margin-top: 10px;
        margin-bottom: 16px;
        background-color: #ddf5c4;
        border-radius: 4px;
        padding: 7px 12px;
    }

    .commentForm {
        margin-bottom: 20px;
        max-width: 540px;
    }

    .oneCommentContainer .commentForm{
        margin-top: 15px;
        margin-bottom: 6px;
    }

    .comment-replies-container{
        padding-left: 3rem;
        margin-top: 1rem;
    }


    @media screen and (max-width: 580px) {   

        .commentForm{
            margin-bottom: 0.5rem;
        }

        .commentSectionTitle {

            font-size: 1rem;

        }

        .commentContent{

            margin-bottom: 2px;
            
        }

        .commentForm button[type="submit"] {
            
            margin-top: 4px;
        }

        .comment-replies-container{
            padding-left: 0.75rem;
            margin-top: 0.8rem;
        }


    }

</style>