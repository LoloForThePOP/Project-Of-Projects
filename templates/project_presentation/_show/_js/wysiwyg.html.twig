<script>
    
    // this script should be called only for user presenters
    
    // hiding or showing items : see wysisyg.css and a few declaration in project_presentation_page.css
    
    $(document).ready(function(){

        // make delete item icons appear when clicking on a trash icon        
    
        $(".show-delete-items-buttons").click(function() {

            var scope = $(this).closest('.pp-struct-container').find('.delete-button');

            if ($(this).hasClass("inactivated")){

                scope.css('visibility', 'visible').css('opacity', '1');

            }

            else {

                scope.css('visibility', 'hidden').css('opacity', '0');

            }

            $(this).toggleClass("inactivated activated");
            
        });

        // switching between edition mode and consultation mode
            
        $( "#pp-switch-edit-consult-mode" ).click(function() {

            if($(this).hasClass("edition-mode")){

                // Entering edition mode

                // enabling sortable capabilities
                $('.js-elements-list').sortable('disabled', true);

                // enabling inline editing capabilities
                $("[data-edit]").attr('contenteditable','true');

            }

            else{

                // Entering consultation mode

                // disabling sortable capabilities
                $('.js-elements-list').sortable('disabled', false);
                
                // disabling inline editing capabilities
                $("[data-edit]").attr('contenteditable','false');

            }

            // toggling "switch display mode" button status

            $(this).toggleClass("edition-mode consultation-mode");

            // toggling whole presentation container status

            $(".pp-container").toggleClass("in-edition-mode in-consultation-mode");

            // hide / show flash messages

            $("#flash-messages").toggleClass("pp-edition-mode");


        });


        // initialising inline edit capabilities

        $("[data-edit]").attr('contenteditable','true');
        managePlaceholder('categories');

        // ajax live save capability on editable elements
        // thanks yo https://stackoverflow.com/questions/19910843/autosave-input-boxs-to-database-during-pause-in-typing/19911256#19911256

        var timeoutId;

        $( "[data-edit]" ).on( "input", function() {

            metadata = $(this).attr("data-edit");

            content = $(this).html().trim()// <br> to newlines \n : thanks to https://stackoverflow.com/questions/13762863/contenteditable-field-to-maintain-newlines-upon-database-entry
            .replace(/<br\s*\/*>/ig, '\n')  
            .replace(/(<(p|div))/ig, '\n$1') 
            .replace(/(<([^>]+)>)/ig, "");

            //console.log(content);

            //console.log( content );

            // If a timer was already started, clear it.
            if (timeoutId) clearTimeout(timeoutId);

            elem = $(this);

            timeoutId = setTimeout(function() {

                $.ajax({

                    url: "{{path('live_save_pp')}}",
                    type: "POST",
                    data: {
                        "metadata": metadata,
                        "content": content,
                    },
                    
                    success: function(data) {

                        console.log("edited structure ok done");

                        $( "#live-feedback" ).text("");
    
                        customEvents.dispatchEvent(

                            new CustomEvent('presentationChangedOnRemote', {

                                detail: {

                                    "structure": 'misc',
                                    "metadata": metadata,
                                    "content": content,

                                }
                            })

                        );

                    },
    
                    error : function(xhr, textStatus, errorThrown) {

                        console.log(errorThrown);
                        
                        elem.after($( "#live-feedback" ).text(xhr.responseJSON.error));
    
                        
                        //console.log(xhr.responseJSON);
                    }  
    
                });

            }, 2000);

        });



        customEvents.addEventListener(
            
            "presentationChangedOnRemote", 

            function(e) { 

                console.log(e.detail.structure); 

                var data = e.detail;

                switch(data.structure){

                    case 'keywords':

                        refresh_keywords();
                        break;

                    case 'categories':

                        refresh_categories();
                        break;

                    case 'misc':

                        refresh_misc(data.metadata, data.content);
                        break;

                    default:
                      console.log("This structure is not refreshed");

                }

                managePlaceholder(data.structure);


                  

            }

        );

            
        
        function refresh_keywords(){

            keywordsString = getKeywordsString();

            if(keywordsString != ''){

                $("#pp-keywords").text('#'+keywordsString.replace(/\s/g, '').replace(/,/g, ' #'));
            }

            else($("#pp-keywords").text(""));

        }

        function refresh_categories(){

            $("#categories-dropdown-content").html("");

            $("#cat-grid .selectedCategory").each(function(){

                var icon = $(this).find(".bt-left-col").html();
                var text = $(this).find(".bt-right-col").text();

                var li = $('<li>').append(icon+text);

                $("#categories-dropdown-content").append(li);

            });

        }

        
        function refresh_misc(metadata, content){

            metadata = JSON.parse(metadata)
                
            if (metadata.property == "websites" && metadata.subproperty == "url"){
                
                $( "[data-website-link = "+metadata.subid+"]" ).attr("href", content);

                return true;
            }
                
            if (metadata.entity == "need" && metadata.property == "title"){
                
                $( "[data-need-title = "+metadata.id+"] .needTitle" ).html(content);
            }

        }


        function managePlaceholder(structureName){

            switch(structureName){

                case 'keywords':
                case 'categories':

                    console.log(hasCategories());
                    console.log(hasKeywords());

                    if( !hasCategories()){

                        $("#pp-categories").hide();

                    } else($("#pp-categories").show())

                    if( !hasCategories() && !hasKeywords()){

                        $("#categories-keywords-placeholder").show();
                        
                        
                    }else{$("#categories-keywords-placeholder").hide();}

                    break;

                default:
                  break;

            }



        }

        function getKeywordsString(){ // from hidden input

            return $("#keywords-string").text().trim();

        }

        function hasKeywords(){

            return getKeywordsString() == true;

        }

        function hasCategories(){

            return $("#categories-dropdown-content").text().trim() !== '';

        }








    });




    
    // + when a structure has just been made empty in edition mode, it should not be displayed in consultation mode.
    // --> See : reorder_delete_elements.html.twig (when deleting elements), and update_presentation_settings.html.twig (hide or show private messages card). 


</script>