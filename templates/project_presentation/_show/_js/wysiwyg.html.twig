<script>
    
    // this script should be called only for user presenters
    
    // hiding or showing items : see wysisyg.css and a few declaration in project_presentation_page.css
    
    $(document).ready(function(){

            
        // Detect if user is offline/online status in simple way.
        // Thx to Didier L. https://stackoverflow.com/questions/189430/detect-the-internet-connection-is-offline

        window.addEventListener('online',  updateOnlineStatus);
        window.addEventListener('offline', updateOnlineStatus);

        function updateOnlineStatus(event) {
            var condition = navigator.onLine ? "user-online" : "user-offline";
            document.body.className = condition;
        }

        // make delete item icons appear when clicking on a trash icon        
    
        $(".show-delete-items-buttons").click(function() {

            var scope = $(this).closest('.pp-struct-container').find('.delete-button');

            if ($(this).hasClass("inactivated")){

                scope.css('visibility', 'visible').css('opacity', '1');

            }

            else {

                scope.css('visibility', 'hidden').css('opacity', '0');

            }

            $(this).toggleClass("inactivated activated");
            
        });

        // switching between edition mode and consultation mode
            
        $( "#pp-switch-edit-consult-mode" ).click(function() {

            if($(this).hasClass("edition-mode")){

                // Entering edition mode

                // enabling sortable capabilities
                $('.js-elements-list').sortable('disabled', false);

                // enabling inline editing capabilities
                $("[data-edit]").attr('contenteditable','true');

            }

            else{

                // Entering consultation mode

                // disabling sortable capabilities
                $('.js-elements-list').sortable('disabled', true);
                
                // disabling inline editing capabilities
                $("[data-edit]").attr('contenteditable','false');

            }

            // toggling "switch display mode" button status

            $(this).toggleClass("edition-mode consultation-mode");

            // toggling whole presentation container status

            $(".pp-container").toggleClass("in-edition-mode in-consultation-mode");

            // hide / show flash messages

            $("#flash-messages").toggleClass("pp-edition-mode");


        });


        // initialising inline edit capabilities
        $("[data-edit]").attr('contenteditable','true');


        // ajax live save capability on editable elements
        // thanks you https://stackoverflow.com/questions/19910843/autosave-input-boxs-to-database-during-pause-in-typing/19911256#19911256

        var timeoutId;

        $( "[data-edit]" ).on( "input", function() {

            metadata = $(this).attr("data-edit");

            // If a timer was already started, clear it.
            if (timeoutId) clearTimeout(timeoutId);

            elem = $(this);

            timeoutId = setTimeout(function() {

                ajaxSavePresentation(metadata, elem);

            }, 1250);

        });

        function ajaxSavePresentation(metadata, elem=null){

            console.log(metadata);
            
            content = elem.remove(".inline-success-feedback").html().trim(); // avoid feedback mark from being saved with content (see below).

            if(content=='<br>'){elem.empty(); content=''} //when contenteditable is cleared, an undesired <br> is added (+ this br tag prevents placeholder to show up).

            $.ajax({

                url: "{{path('live_save_pp')}}",
                type: "POST",
                data: {
                    "metadata": metadata,
                    "content": content,
                },
                
                success: function(data) {

                    console.log("edited structure ok done");

                    elem.append('<span class="inline-success-feedback"> âœ…</span>');

                    $(".inline-success-feedback").fadeOut(1000, function() { 

                        $(this).remove(); 

                    });

                   
                    $("#"+JSON.parse(metadata).subid+" .date").remove(); //clearing createdAt or updatedAt display.

                    customEvents.dispatchEvent(

                        new CustomEvent('presentationChangedOnRemote', {

                            detail: {

                                "structure": 'misc',
                                "metadata": metadata,
                                "content": content,

                            }
                        })

                    );

                },

                error : function(xhr, textStatus, errorThrown) {

                    console.log(errorThrown);
                    
                    elem.after($( "#live-feedback" ).attr("class", "text-danger").text(xhr.responseJSON.error));

                    
                    //console.log(xhr.responseJSON);
                }  

            });

        }


        // when a structure has been wysiwyg changed, some updates should be done so we catch the event.

        customEvents.addEventListener(
            
            "presentationChangedOnRemote", 

            function(e) { 

                console.log(e.detail.structure); 

                var data = e.detail;

                switch(data.structure){

                    case 'misc':

                        refresh_misc(data.metadata, data.content);
                        break;

                    default:
                      console.log("This structure is not refreshed");

                }

            }

        );

        // when a structure has been wysiwyg changed, some tag attributes might need to be changed also.

        function refresh_misc(metadata, content){

            metadata = JSON.parse(metadata)

            //console.log(metadata);

            console.log("refresh_misc_function"+content);
                
            if (metadata.property == "websites" && metadata.subproperty == "url"){
                
                $( "[data-website-link = "+metadata.subid+"]" ).attr("href", content);

                return true;
            }
                
            if (metadata.entity == "need" && metadata.property == "title"){
                
                $( "[data-need-title = "+metadata.id+"] .needTitle" ).html(content);
            }
                
            if (metadata.property == "status" && metadata.entity == "PPBase"){

                $(".project-status-display ." + metadata.subproperty).text(content.text).css("background-color", content.bg_color);

            }
                
            if (metadata.property == "status" && metadata.subproperty == "userRemarks"){

                if(content !== ""){
                    content=content.trim();
                }

                $(".project-status-display .userRemarks").text(content);

            }
                
            if (metadata.entity == "slide" && metadata.property == "caption"){

                hasCaptions();

            }
                
        }


    /* Project Status Live Edition & Save*/

    $( "ul .project-status-button" ).on( "click", function() {

        $(this).siblings().removeClass("active");


        if($(this).hasClass("active")){

            $(this).removeClass("active");
            value='';

        }

        else{

            $(this).addClass("active")
            value = $(this).attr("data-value");
          
        };

        console.log(value);
        console.log($("[data-value='" + value + "']").text());
          
        metadata = $(this).attr("data-edit-project-status");

        $t=$(this);
        

        $.ajax({

            url: "{{path('live_save_pp')}}",
            type: "POST",
            data: {
                "metadata": metadata,
                "content": value,
            },
            
            success: function(data) {

                console.log("project status updated !");

                var newLabel;

                if(value==""){ //status is deselected without replacement

                    newLabel="";

                }else{

                    newLabel=$t.attr("data-short-descr");

                }

                customEvents.dispatchEvent(

                    new CustomEvent('presentationChangedOnRemote', {

                        detail: {

                            "structure": 'misc',
                            "metadata": metadata,
                            "content": {"text": newLabel, "bg_color": $t.attr("data-bg-color")}, //we update project status display with a readable string (not an identifier), so here we search for this readable string.

                        }
                    })

                );

            },

            error : function(xhr, textStatus, errorThrown) {

                console.log(errorThrown);
                
                $(this).after($( "#live-feedback" ).attr("class", "text-danger").text(xhr.responseJSON.error));

                //console.log(xhr.responseJSON);
            }  

        });
        
    });




    // + when a structure has just been made empty in edition mode, it should not be displayed in consultation mode.
    // --> See : reorder_delete_elements.html.twig (when deleting elements), and update_presentation_settings.html.twig (hide or show private messages card). 
    

});



</script>