{% block stylesheet %}

<link href="/css/slideshow.css" rel="stylesheet">

{% endblock %}

{% if userPresenter %}

	{% embed "/project_presentation/_show/structure_content_skeleton.html.twig" with {'iconName': "slideshow", 'title': "Diaporama", 'additionalClasses': "pp-edition-mode", 'helpContext': "slides",} %}

		{% block editButtons %}

			{% if countSlides <= constant('MAX_SLIDES', presentation) %}
			
				{# Add an image button (triggers a modal with a form) #}
			
				<button type="button" data-bs-toggle="modal" data-bs-target="#addImageSlideFormModal"
				class="pp-edition-mode btn btn-light btn-sm me-3">+ Image</button>

				{# Add a video button (triggers a modal with a form) #}

				<a class="text-decoration-none" data-bs-toggle="modal" data-bs-target="#addVideoSlideFormModal">

					<button class="pp-edition-mode btn btn-light btn-sm me-3">+ Video</button>

				</a>

			{% endif %}

			{% if countSlides > 1 %}

				{# Link to reorder slides page #}

				<a id="manage-slides" href="{{ path('order_slides', {'stringId': presentation.stringId}) }}" class="d-lg-none text-decoration-none me-3">
                        
					<button type="button" class="pp-edition-mode btn btn-light btn-sm" aria-label="Manage Order and Titles Button">Ordre</button>

				</a>
			
			{% endif %}
		
		{% endblock %}

	{% endembed %}

{% endif %}

<!-- Project Presentation Slideshow Display -->
<!-- Structure Container -->

	<!-- Slideshow Container -->

	<div id="slides" class="slideshow-container">

		<!-- Caption Container -->
					
		<div class="caption-container {{userPresenter ? "col-lg-9" : "col-lg-12" }}" >

			{% for slide in presentation.slides %}
					
				{# span is used because <br> is inserted into contenteditable html element if left empty #}

				<span class="caption" data-text="Titre ou lÃ©gende de l'image" data-edit='{"entity": "slide", "property": "caption", "id": {{slide.id}} }' data-slide-id="{{slide.id}}">{{ slide.caption[:1] | upper ~ slide.caption[1:] }}</span>
				
			{% endfor %}

		</div>
		
		<div class="row m-0">
				
			{#  Slides Container #}

			<div class="slides-container px-0 col edit-hoverable-item"> 

				{% include "project_presentation/_show/slides/_slides_container.html.twig" %}

			</div>

			{#  Thumbnails Container #}
			{% set showThumbnails = false %}

			{% if countSlides > 1 and userPresenter %}
				
				{% set showThumbnails = true %}
			
			{% endif %}

			{% if userPresenter %} {# Displaying Thumbnails only for user presenters so they can change orders #}
				  
				<div class="pp-edition-mode thumbnails-container col-lg-2 px-0 d-none {{ showThumbnails ? 'd-lg-flex' }} flex-column align-items-center">
				
					{% include "project_presentation/_show/slides/_thumbnails_container.html.twig" %}
					
				</div>

			{% endif %}

		</div>	

	</div>

<style>

	#slideshow-struct-container .pp-struct-title-container{

		display: inherit; /* in edition mode, default is display initial (which remove this element's margin-bottom) */
	}

</style>

	<script>

		var slideIndex = 1;

		function plusSlides(n) {

			showSlides(slideIndex += n);
			
		}

		function currentSlide(n) {
			showSlides(slideIndex = n);
		}

		function showSlides(n) {

			var i;
			var slides = document.getElementsByClassName("mySlides");
			var dots = document.getElementsByClassName("SlideImageThumbnail");
			var thumbnail = document.getElementsByClassName("thumbnail");
			var captions = document.getElementsByClassName("caption");
			
			if (n > slides.length) {slideIndex = 1}
			
			if (n < 1) {slideIndex = slides.length}
			
			for (i = 0; i < slides.length; i++) {

				slides[i].style.display = "none";

				if(typeof(captions[i]) != 'undefined'){
					captions[i].style.display = "none";
				}
				
			}
			
			for (i = 0; i < dots.length; i++) {
				dots[i].className = dots[i].className.replace(" active", "");
				thumbnail[i].className = thumbnail[i].className.replace(" active", "");
			}
			
			slides[slideIndex-1].style.display = "flex";

			killImageZoom(); //deleting previous lens
			imageZoom("image-slide-wrapper-"+slides[slideIndex-1].id, "image-zoom-result");


			if(typeof(captions[slideIndex-1]) != 'undefined'){
				captions[slideIndex-1].style.display = "block";
			}
			
			dots[slideIndex-1].className += " active";
			thumbnail[slideIndex-1].className += " active";

			if(typeof(captionText) != 'undefined' && captionText != null){
				captionText.innerHTML = dots[slideIndex-1].getAttribute('data-caption');
			}


		}

		
		$(document).ready(function(){

			showSlides(slideIndex);
		
		});

</script>

	<script>

		// thanks at https://www.w3schools.com/howto/howto_js_image_zoom.asp
		function imageZoom(imgParentWrapperId, resultID) {

			var img, lens, result, cx, cy, timeout;
			img = document.getElementById(imgParentWrapperId).getElementsByTagName('img')[0];

			result = document.getElementById(resultID);

			/* Create lens: */
			lens = document.createElement("DIV");
			lens.setAttribute("class", "img-zoom-lens");

			/* Insert lens: */
			img.parentElement.insertBefore(lens, img);

			/* Calculate the ratio between result DIV and lens: */
			cx = result.offsetWidth / lens.offsetWidth;
			cy = result.offsetHeight / lens.offsetHeight;

			/* Set background properties for the result DIV */
			result.style.backgroundImage = "url('" + img.src + "')";
			result.style.backgroundSize = (img.width * cx) + "px " + (img.height * cy) + "px";

			/* Execute a function when someone moves the cursor over the image, or the lens: */
			lens.addEventListener("mousemove", moveLens);
			img.addEventListener("mousemove", moveLens);
			
			lens.addEventListener("mouseout", closeZoom);

			/* And also for touch screens: */
			lens.addEventListener("touchmove", moveLens);
			img.addEventListener("touchmove", moveLens);


			lens.style.opacity="0";


			function moveLens(e) {

				var pos, x, y;

				/* Prevent any other actions that may occur when moving over the image */
				e.preventDefault();

				/* MAke lens appears */
				lens.style.opacity="0.2";

				/* Get the cursor's x and y positions: */
				pos = getCursorPos(e);

				/* Calculate the position of the lens: */
				x = pos.x - (lens.offsetWidth / 2);
				y = pos.y - (lens.offsetHeight / 2);
				
				/* Prevent the lens from being positioned outside the image: */
				if (x > img.width - lens.offsetWidth) {x = img.width - lens.offsetWidth; }
				if (x < 0) {x = 0;}
				if (y > img.height - lens.offsetHeight) {y = img.height - lens.offsetHeight;}
				if (y < 0) {y = 0;}

				/* Set the position of the lens: */
				lens.style.left = x + "px";
				lens.style.top = y + "px";

				/* Display what the lens "sees": */
				result.style.backgroundPosition = "-" + (x * cx) + "px -" + (y * cy) + "px";
				
				result.style.marginLeft = "auto";

			}

			function closeZoom(e) {

				/* Prevent any other actions that may occur when moving out the image */
				e.preventDefault();

				result.style.marginLeft = "-10000px";

			}

			function getCursorPos(e) {

				var a, x = 0, y = 0;
				e = e || window.event;

				/* Get the x and y positions of the image: */
				a = img.getBoundingClientRect();

				/* Calculate the cursor's x and y coordinates, relative to the image: */
				x = e.pageX - a.left;
				y = e.pageY - a.top;

				/* Consider any page scrolling: */
				x = x - window.pageXOffset;
				y = y - window.pageYOffset;
				return {x : x, y : y};

			}

		}


		function killImageZoom(){
			const elements = document.getElementsByClassName("img-zoom-lens");
			while(elements.length > 0){
				elements[0].parentNode.removeChild(elements[0]);
			}
		}
	
	</script>

	<script>
		
		// reducing caption container height when no slide with caption (see caption flag in _thumbnail_container.html.twig)

		function hasCaptions(){

			var hasCaptionFlag = false;

			$('.caption').each(function(){

				if($.trim($(this).text()) !== ''){
					hasCaptionFlag = true; 
				}

			});

			if (!hasCaptionFlag) {

				$('.caption-container').addClass('no-caption')

			}else{

				$('.caption-container').removeClass('no-caption');

			}

		}

		
		// remove thumbnails container when only one slide is displayed


		if ($('.mySlides').length == 1) {

			$('#slides').addClass('only-one-slide');

		} 


	</script>

	{# displaying appropriate image or video slide when hovering its thumbnail (a mess if more than 4 slides ) #}

	<script>

		mouseoverThumbnail(); //if($( ".thumbnail" ).length < 5) {}

		function mouseoverThumbnail() {
		
			$( ".thumbnail" ).mouseover(function() {

				currentSlide($(this).data("loop-index"));
				
			});

		}

		hasCaptions();

		

	</script>


	<style>

		.img-zoom-lens {
			position: absolute;
			border: 1px solid #d4d4d4;
			/*set the size of the lens:*/
			width: 80px;
			height: 80px;
			z-index: 2;
			background-color: blue;
			opacity: 0; /* Make lens invisible at initialisation */
			border-radius: 8px;
		}

	</style>

